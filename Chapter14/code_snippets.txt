<html>
<body>
<ul id='docList'>
</ul>
</body>
</html>
<script>
var ws = new WebSocket("ws://localhost:4848/app/");
var request = {
     "handle": -1,
     "method": "GetDocList",
     "params": {},
     "outKey": -1,
     "id": 2
}
ws.onopen = function(event){
     ws.send(JSON.stringify(request));
     // Receive the response
     ws.onmessage = function (event) {
         var response = JSON.parse(event.data);
         if(response.method != ' OnConnected'){
             var docList = response.result.qDocList;
             var list = '';
             docList.forEach(function(doc){
                 list += '<li>'+doc.qDocName+'</li>';
             })
         document.getElementById('docList').innerHTML = list;
         }
    }
}
</script>



var ws = new WebSocket("ws://localhost:4848/app/MasteringQlikSense.qvf");



var certPath =  path.join('C:', 'ProgramData', 'Qlik', 'Sense', 'Repository', 'Exported Certificates', '.Local Certificates');

var certificates = {
        cert: fs.readFileSync(path.resolve(certPath, 'client.pem')),
        key: fs.readFileSync(path.resolve(certPath, 'client_key.pem')),
        root: fs.readFileSync(path.resolve(certPath, 'root.pem'))
        };

// Open a WebSocket using the engine port (rather than going through the proxy)
var ws = new WebSocket('wss://server.domain.com:4747/app/', {
        ca: certificates.root,
        cert: certificates.cert,
        key: certificates.key,
        headers: {
                        'X-Qlik-User':  'UserDirectory=internal; UserId=sa_engine'
        }
        });
       
ws.onopen = function (event) {
 // Call your methods
}


//Prefix is used for when a virtual proxy is used with the browser.
var prefix = window.location.pathname.substr( 0, window.location.pathname.toLowerCase().lastIndexOf( "/extensions" ) + 1 );

//Config for retrieving the qlik.js module from the Qlik Sense Server
var config = {
    host: window.location.hostname,
    prefix: prefix,
    port: window.location.port,
    isSecure: window.location.protocol === "https:"
};


require.config({
    baseUrl: (config.isSecure ? "https://" : "http://" ) + config.host + (config.port ? ":" + config.port     : "" ) + config.prefix + "resources"
});

require(["js/qlik"], function (qlik) {
    qlik.setOnError( function (error) {
        console.log(error);
    });
    //Open an App
    var app = qlik.openApp('MasteringQlikSense.qvf', config);




    //The base config with all details filled in 
var config = { 
     schema: schema,
     appId: "My Demo App.qvf",
     session:{
         host:"localhost",
         port: 4848,
         prefix: "",
         unsecure: true,
     },
}
//Now that we have a config, use that to connect to the QIX service.
enigma.getService("qix" , config).then(function(qlik){
     qlik.global.openApp(config.appId)
    //Open App
      qlik.global.openApp(config.appId).then(function(app){
        //Create SessionObject for FieldList
        app.createSessionObject( {
          qFieldListDef: {
              qShowSystem: false,
              qShowHidden: false,
              qShowSrcTables: true,
              qShowSemantic: true,
              qShowDerivedFields: true
          }, qInfo: {
              qId: "FieldList",
              qType: "FieldList"
          }
      } ).then( function(list) {
          return list.getLayout();
      } ).then( function(listLayout) {
          return listLayout.qFieldList.qItems;
      } ).then( function(fieldItems) {
         console.log(fieldItems)
      } );
      })
}





<html> 
<head> 
 <link href="https://<qlik_sense_servername>/resources/autogenerated/qlik-styles.css" rel="stylesheet"> 
 <script src="https://<qlik_sense_servername>/resources/assets/external/requirejs/require.js"></script> 
 <script> 

 var config = { 
     host: 'localhost', 
     prefix: '/', 
     port: 443, 
     isSecure: true 
 };

require.config({ 
 baseUrl: ( config.isSecure? "https://" : "http://" ) + config.host + (config.port? ":" + config.port: "") + config.prefix + "resources" 
 }); 
 
 require(["js/qlik"], function ( qlik ){ 
     qlik.setOnError(function(error) { 
         alert(error.message); 
     }); 
 
     var appName = 'Mastering QS.qvf'; 
     if (!app){ 
         //Get App
         app = qlik.openApp(appName, config); 
         app.getObject("appObject", 'qAeJ'); 
     }  
 }); 
 </script>
</head> 
<body> 
 <div class="qlik-embed" id="appObject"></div> 
</body> 
</html>






<html> 
<head> 
 <link href="https://<qlik_sense_servername>/resources/autogenerated/qlik-styles.css" rel="stylesheet"> 
 <script src="https://<qlik_sense_servername>/resources/assets/external/requirejs/require.js"></script> 
 <script> 

 var config = { 
     host: 'localhost', 
     prefix: '/', 
     port: 443, 
     isSecure: true 
 };

require.config({ 
 baseUrl: ( config.isSecure? "https://" : "http://" ) + config.host + (config.port? ":" + config.port: "") + config.prefix + "resources" 
 }); 
 
 require(["js/qlik"], function ( qlik ){ 
     qlik.setOnError(function(error) { 
         alert(error.message); 
     }); 
 
     var app = qlik.openApp('Mastering QS.qvf'); 
     app.visualization.create(
        'barchart',
        ["Case Owner Group","=Avg([Case Duration Time])"],
        {title:"Great on-the-fly barchart for Mastering QS"}
     ).then(function(bar){
            bar.show('appObject'); }); 
     }); 
 </script>
</head> 
<body> 
 <div class="qlik-embed" id="appObject"></div> 
</body> 
</html>






<html> 
<head> 
 <link href="https://<qlik_sense_servername>/resources/autogenerated/qlik-styles.css" rel="stylesheet"> 
 <script src="https://<qlik_sense_servername>/resources/assets/external/requirejs/require.js"></script> 
 <script>
 var config = { 
     host: 'localhost', 
     prefix: '/', 
     port: 443, 
     isSecure: true 
 };

require.config({ 
 baseUrl: ( config.isSecure? "https://" : "http://" ) + config.host + (config.port? ":" + config.port: "") + config.prefix + "resources" 
 }); 
 
 require(["js/qlik"], function ( qlik ){ 
     qlik.setOnError(function(error) { 
         alert(error.message); 
     }); 
 
     var app = qlik.openApp('Mastering QS.qvf'); 
     app.createCube({   
            qDimensions:[ {     
                qDef:{       
                    qFieldDefs : ["Case Owner Group"]
                    }
                }
            }],   
            qMeasures:[{     
                qDef:{       
                    qDef : "=Avg([Case Duration Time])"     
                }
            }],   
            qInitialDataFetch:[{     
                qTop: 0,     
                qLeft: 0,     
                qHeight: 20,     
                qWidth: 3   
            }]
        }, function(reply) {   
            var str = "";   
            $.each(reply.qHyperCube.qDataPages[0].qMatrix, function(key, value) {     
                str += '<li>' + value[0].qText + ':' + value[1].qText + '</li>';   
            });
            $('#list').html(str);   
        });
 })
 </script>
</head> 
<body> 
 <ul class="qlik-list" id="list"></ul> 
</body> 
</html>





<html> 
<head> 
 <link href="https://<qlik_sense_servername>/resources/autogenerated/qlik-styles.css" rel="stylesheet"> 
 <script src="https://<qlik_sense_servername>/resources/assets/external/requirejs/require.js"></script> 
 <script> 
 var config = { 
     host: 'localhost', 
     prefix: '/', 
     port: 443, 
     isSecure: true 
 };
require.config( { 
 baseUrl: ( config.isSecure? "https://" : "http://" ) + config.host + (config.port? ":" + config.port: "") + config.prefix + "resources" 
 }); 
 
 require(["js/qlik"], function ( qlik ){ 
     qlik.setOnError(function(error) { 
        alert(error.message); 
     }); 
     
     var appName = 'Mastering QS.qvf'; 
     if (!app){ 
     //Get App
     app = qlik.openApp(appName, config); 

     function makeSelection() {
        var field = app.field('Case Owner Group');
        field.selectAll(false)
     }

     function clearSelection() {
        var field = app.field('Case Owner Group');
        field.clear();
     }

    } 
 }); 
 </script>
</head> 
<body> 
<button onclick="makeSelection()">Make Selection</button>
<button onclick="clearSelection()">Clear Selection</button>
</body> 
</html>




//Code snippet kindly provided by Ralf Becher 
var selState = app.selectionState();
 var listener = function () {
     $('#QVSel').html('');
     if (selState.selections.length > 0) {
         var selections = 'Selections:';
         $.each(selState.selections, function (i, s) {
             selections += '</br>';
             selections += s.fieldName + ': ';
             selections += s.selectedValues.map(function (e) {
                 return e.qName;
             }).join(', ');
         });
     $('#QVSel').html(selections);
 }
 //unregister the listener when no longer notification is needed.
 //selState.OnData.unbind(listener);
 };
 //bind the listener
 selState.OnData.bind(listener);