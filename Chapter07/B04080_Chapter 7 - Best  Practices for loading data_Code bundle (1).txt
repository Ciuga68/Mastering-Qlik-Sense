Chapter 7  - Best practices for loading data - code

=============================
SET ThousandSep=',';
=============================

=============================
SET ThousandSep='.';
============================================


===========================================
[autoCalendar]: 
 DECLARE FIELD DEFINITION Tagged ('$date')
FIELDS
 Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),
 Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),
 Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),
 Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),
 Month($1) AS [Month] Tagged ('$month', '$cyclic'),
 Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),
 Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),
 Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),
 Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),
 Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified'),
 If (DayNumberOfYear($1) <= DayNumberOfYear(Today()), 1, 0) AS [InYTD] ,
 Year(Today())-Year($1) AS [YearsAgo] ,
 If (DayNumberOfQuarter($1) <= DayNumberOfQuarter(Today()),1,0) AS [InQTD] ,
 4*Year(Today())+Ceil(Month(Today())/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo] ,
 Ceil(Month(Today())/3)-Ceil(Month($1)/3) AS [QuarterRelNo] ,
 If(Day($1)<=Day(Today()),1,0) AS [InMTD] ,
 12*Year(Today())+Month(Today())-12*Year($1)-Month($1) AS [MonthsAgo] ,
 Month(Today())-Month($1) AS [MonthRelNo] ,
 If(WeekDay($1)<=WeekDay(Today()),1,0) AS [InWTD] ,
 (WeekStart(Today())-WeekStart($1))/7 AS [WeeksAgo] ,
 Week(Today())-Week($1) AS [WeekRelNo] ;
===========================================



==========================================
DERIVE FIELDS FROM FIELDS [MONTH_BUS_KEY], [Full Month] USING [autoCalendar] ;
=============================================



============================================
/*I load sample data using Inline load */

myDataTable:
Load * Inline
[
FullName, ProductType, Amount
Maria Johns, Personal Loan Type A, 10000
Peter Smith, Car Loan, 25000
George Thomson, Car Loan, 16000
Paula Mays, Personal Loan Type B, 55000
Patricia Gonzalez, Mortgage 5 yr fixed, 750000 
]; 

/*I categorise my field Amount using tags */
TAG FIELD Amount WITH '$myAmount';

/* Here we declare a definition for fields with the tagged $myAmount */

[DeclaredValues]: 
 DECLARE FIELD DEFINITION Tagged ('$myAmount')
FIELDS
 Dual('USD '&round($1/1000,0.1)&'K', $1) AS AmountInThousands Tagged ('$thousands', '$myAmount')
,Dual('USD '&round($1/1000000,0.1)&'M', $1) AS AmountInMillions Tagged ('$millions', '$myAmount')
 ,if(($1)>=0 and ($1)<20000, '0-20K'
 , If(($1)>=20000 AND ($1)<50000, '20-50K'
 , '+50K')) AS AmountGroup Tagged ('$amoungroup', '$myAmount')
;
  
/*Here we derive the files using DeclaredValues */
  
  DERIVE FIELDS FROM EXPLICIT TAGS '$myAmount' USING DeclaredValues;
==============================================



==============================================================
CitiesCountries:
Load * INLINE
[
City, Country 
London, United Kingdom
Manchester, United Kingdom
Leeds, United Kingdom
New York, United States
Miami, United States
Berlin, Germany
Munich, Germany
Rome, Italy
];

STORE CitiesCountries INTO 'lib://myConnection/CitiesCountries.qvd';
==============================================================


-=============================================================
LOAD * FROM 'LIB://myConnection/CitiesCountries.qvd';
==============================================================


=============================================
Optimized_1:
LOAD 
     City,
     Country
FROM 'LIB://myConnection/CitiesCountries.qvd';
=============================================


=============================================
Optimized_1:
LOAD 
     City,
     Country
FROM 'LIB://myConnection/CitiesCountries.qvd';
=============================================

=============================================
Optimized_2:
LOAD 
     City       AS   Cities,
     Country    AS   Countries
FROM 'LIB://myConnection/CitiesCountries.qvd';
=============================================

===========================================
Temp:
Load City INLINE
[
City
New York
Munich
];

Optimized_3:
LOAD 
     City       AS   Cities,
     Country    AS   Countries
FROM 'LIB://myConnection/CitiesCountries.qvd' (qvd)
Where Exists(City);
===========================================

===========================================
Non-Optimized:
LOAD 
     City       AS   Cities,
     Country    AS   Countries,
     pick(match(Country, 'United States','United Kingdom','Germany'), 'US', 'GB', 'DE) AS CountryCodes
FROM 'LIB://myConnection/CitiesCountries.qvd' (qvd)
Where Exists(City);
-===========================================


============================================
Buffer (Incremental) 
LOAD @1 as LogField
FROM
[C:\AppenOnly.txt]
(txt, codepage is 1252, no labels, delimiter is '\t', msq);

MyAppendOnlyResults:
Load * from 
C:\Users\localUser\Documents\Qlik\Sense\Buffers\*.qvd (qvd);
================================================


===============================================
//I treat my table keys as system fields by hiding them. We do not want to use the keys in the front end and therefore we shouldn't show them.

set HidePrefix='%' ;

//I check if the file exists. If it doesn't I do a full load, if it does I perform the incremental load.

IF IsNull(QvdCreateTime('C:\myQVD\Countries.qvd')) THEN

TRACE Performing full load of data source;

Countries:
SELECT * FROM COUNTRY;

STORE Countries INTO C:\myQVD\Countries.qvd (qvd);

ELSE
TRACE File exists. Performing incremental load;

maxDate:
LOAD max(LastModifiedDate) AS MaxModifiedDate
FROM c:\myQVD\Countries.qvd (qvd);

TRACE Storing the most current modified date into a variable.;

LET vMaxModifiedDate = peek(MaxModifiedDate);

TRACE Loading new records from the source.;

Countries:
SELECT * FROM COUNTRY
WHERE LastModifiedDate > $(vMaxModifiedDate)
;

TRACE Appending stored records to  new ones.

Concatenate
LOAD * FROM c:\myQVD\Countries.qvd (Qvd);

TRACE Storing modified qvd file.;

STORE Countries INTO c:\myQVD\Countries.qvd (Qvd);

ENDIF

================================================



================================================
TRACE Appending stored records to  new ones.;

Concatenate
LOAD * FROM c:\myQVD\Countries.qvd (Qvd)
WHERE Not EXISTS(%Id);

TRACE Storing modified qvd file.;

================================================


=================================================

//I treat my table keys as system fields by hiding them. We do not want to use the keys in the front end and therefore we shouldn't show them.

set HidePrefix='%' ;

//I check if the file exists. If it doesn't I do a full load, if it does I perform the incremental load.

IF IsNull(QvdCreateTime('C:\myQVD\Countries.qvd')) THEN

TRACE Performing full load of data source;

Countries:
SELECT * FROM COUNTRY;

STORE Countries INTO C:\myQVD\Countries.qvd (qvd);

ELSE
TRACE File exists. Performing incremental load;

maxDate:
LOAD max(LastModifiedDate) AS MaxModifiedDate
FROM c:\myQVD\Countries.qvd (qvd);

TRACE Storing the most current modified date into a variable.;

LET vMaxModifiedDate = peek(MaxModifiedDate);

TRACE Loading new records from the source.;

Countries:
SELECT * FROM COUNTRY
WHERE LastModifiedDate > $(vMaxModifiedDate)
;

TRACE Appending stored records to  new ones.;

Concatenate
LOAD * FROM c:\myQVD\Countries.qvd (Qvd)
WHERE Not EXISTS(%Id);

TRACE We join the final table with all the current keys in the source to remove the delete records.;

INNER JOIN 
SQL SELECT %Id FROM COUNTRY;

TRACE Storing modified qvd file.;

STORE Countries INTO c:\myQVD\Countries.qvd (Qvd);

ENDIF


==================================================
